#include<iostream.h>
#include<string.h>
#include<conio.h>

class node{
	node *rcl , *lcl;
	int top ;
	int info;
	
	node *st[20];
	public :
		void inorder(node *);
		void preorder(node *);
		void postorder(node *);
		node * create(node *);
		void display(node * , int );
		void push(node *);
		void parent(node *);
		int ancestor(node *, int );	
		node * pop();
		int depth(node *);
		int countLeaf(node *);
		node(){
			top = -1;
		}
};

void node::push(node *n){
	st[++top] = n;
}

node * node::pop(){
	if(top == -1)
		return NULL;
	return st[top--];
}

node *  node::create(node *root){
	node *temp, *prev,*cur;
	char d[10];
	int i , item;
	temp = new node;
	cout<<"element";
	cin>>temp->info;
	temp->lcl = NULL;
	temp->rcl = NULL;
	if(root == NULL){
		root = temp;
		return  root;
	}
	cout<<"direction";
	cin>>d;
	prev = NULL;
	cur = root;
	for(i = 0; i<strlen(d) ; i++){
		if(cur == NULL)
			break;
		prev = cur;
		if(d[i] == 'L')
			cur = cur->lcl;
		else cur = cur->rcl;
	}
	if(cur!=NULL || i!=strlen(d)){
		cout<<"imposible";
		delete temp;
		return root ;
	}
	if(d[i-1] == 'L')
		prev->lcl = temp;
	else prev->rcl = temp;
	return root;
}
void node::display(node *rt , int level){
	int i;
	if(rt == NULL  )return;
	display(rt->rcl , level + 1);
	for(i = 0;i<level ;i++)
		cout<<"	";
	cout<<rt->info<<endl;
	display(rt->lcl , level+1);
}

void node::inorder(node *root){
	if(root == NULL){
		cout<<"empty";
		return;
	}
	node *r = root;
	for(;;){
		for(;r;r=r->lcl)
			push(r);
		r = pop();
		if(!r)
			break;
		cout<<r->info<<" ";
		r = r->rcl;
	}
}

void node::preorder(node *root){
	if(root == NULL){
		cout<<"empty";
		return;
	}
	
	node *r = root;
	for(;;){
		for(;r;r=r->lcl){
			cout<<r->info<<" ";
			push(r);
		}
		r = pop();
		if(!r)
			break;
		r = r->rcl;
	}
}

void node::postorder(node *root){
	if(root == NULL){
		cout<<"empty";
		return;
	}
	node *r = root;

	while(1){
		for(;r;r=r->lcl){
			if(r->rcl != NULL)
				push(r->rcl);
			push(r);
		}
		r = pop();
		if(r->rcl == st[top]){
			pop();
			push(r);
			r = r->rcl;
		}
		else {
			cout<<r->info<<" ";
			if(r == root){
				break;
			}
			r = NULL;
		}
	}
}

void node::parent(node *root){
	if(root == NULL){
		cout<<"empty";
		return;
	}
	if(root->rcl == NULL && root->lcl == NULL){
		cout<<"just one element";
		return ;
	}
	cout<<endl<<"enter element"<<endl;
	int ele;
	cin>>ele;
	node *r = root;
	for(;;){
		for(;r;r=r->lcl)
			push(r);
		r = pop();
		if(!r)
			break;
		if(r->rcl && (r->rcl)->info == ele){
			cout<<r->info<<" is its parent";
			break;
		}
		else if(r->lcl && (r->lcl)->info == ele){
			cout<<r->info<<" is its parent";
			break;
		}
		r = r->rcl;
	}
}

int node::ancestor(node *root, int ele){
	if(root->info == ele){
		return 1;
	}
	if(root->rcl && ancestor(root->rcl,ele)){
		cout<<root->info<<" ";
		return 1;
	}
	if(root->lcl && ancestor(root->lcl,ele)){
		cout<<root->info<<" ";
		return 1;
	}
	return 0;
}

int node::depth(node *r){
	if(r == NULL)
		return 0;
	int a = depth(r->lcl);
	int b = depth(r->rcl);
	return (1 + (a>b?a:b ));
}

int node::countLeaf(node *root){
	if(root == NULL){
		cout<<"empty";
		return 0;
	}
	int count = 0;
	node *r = root;
	for(;;){
		for(;r;r=r->lcl)
			push(r);
		r = pop();
		if(!r)
			break;
		if(r && r->lcl == NULL && r->rcl == NULL)
			count++;
		r = r->rcl;
	}
	return count;
}

int main(){
	clrscr();
	int num , ele;
	node *n1 = NULL, n;
	cout<<"enter no of elements in the tree"<<endl;
	cin>>num;
	for(int i =0;i<num;i++)
	n1 = n.create(n1);
	n.display(n1,0);
	n.inorder(n1);
	cout<<endl;
	n.preorder(n1);
	cout<<endl;
	n.postorder(n1);
	cout<<endl;
	n.parent(n1);
	cout<<endl;
	cout<<"enter element whose ancestors are needed";
	cin>>ele;
	if(!n.ancestor(n1 , ele)){
		cout<<"no such element present"<<endl;
	}
	cout<<endl;
	cout<<endl<<"depth is"<<n.depth(n1);
	cout<<endl<<"no of leaf node are"<<n.countLeaf(n1);
	getch();
	return 0;
}
